import org.apache.tools.ant.taskdefs.condition.Os
import com.github.intrigus.ftd.util.OsUtil
import com.github.intrigus.ftd.internal.dev.DoMacPatching

buildscript {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

     dependencies {
        classpath group: 'org.mini2Dx', name: 'parcl', version: '1.6.1'
    }
}

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id "de.undercouch.download" version "4.0.1"
}

gradle.startParameter.showStacktrace = org.gradle.api.logging.configuration.ShowStacktrace.ALWAYS

wrapper {
    gradleVersion = "5.0"
}

ext {
	junitVersion = "5.5.2"
}

allprojects {
    apply plugin: "java"

    group = 'com.github.intrigus.ftd'
    version = '1.0.0'

    test {
        useJUnitPlatform()

        testLogging {
            exceptionFormat = 'full'
        }
    }

    dependencies {
        implementation "org.slf4j:slf4j-simple:1.7.28"
        implementation "com.fasterxml.jackson.core:jackson-databind:2.9.8"

        // Use JUnit test framework
        testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    }

    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
}

project(":arduino-cli") {
    apply plugin: "application"

    application {
        mainClassName = "com.github.intrigus.ftd.ArduinoCLI"
    }

    dependencies {
        implementation "com.beust:jcommander:1.71"
        implementation "org.zeroturnaround:zt-exec:1.11"
    }
}

project(":scratch-to-c") {
    apply plugin: "application"
    apply plugin: "org.mini2Dx.parcl"

    application {
        mainClassName = "com.github.intrigus.ftd.Sb3ToArduinoC"
    }

    dependencies {
        implementation "com.beust:jcommander:1.71"
        implementation project(":arduino-cli")
    }

    test {
    	workingDir = project(":arduino-cli").projectDir
    }

    parcl {
        linux {
            binName = "stc"
        }
    }
}

project(":ftd-ui-server") {
    apply plugin: "application"
    apply plugin: "org.mini2Dx.parcl"

    application {
        mainClassName = "com.github.intrigus.ftd.ui.MainUI"
    }

    dependencies {
        implementation "com.beust:jcommander:1.71"
        implementation "net.freeutils:jlhttp:2.4"
        implementation "org.zeroturnaround:zt-exec:1.11"
        implementation project(":arduino-cli")
        implementation project(":scratch-to-c")
    }

    parcl {
        linux {
            binName = "fus"
            withJre("$buildDir/jre_to_be_bundled/jdk-11.0.5+10-jre")
        }

        exe {
            exeName = "fus"
            withJre("$buildDir/jre_to_be_bundled/jdk-11.0.5+10-jre")
        }

        app {
            appName = "fus"
            icon = "${project.projectDir}/icon.icns"
            applicationCategory = "public.app-category.education"
            displayName = 'fus'
            identifier = 'com.github.intrigus.ftd.ui'
            copyright = 'Copyright 2019 intrigus'
            withJre("$buildDir/jre_to_be_bundled/jdk-11.0.5+10-jre/Contents/Home")
        }
    }

    def targetFolder = {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            "${project.buildDir}/windows/"
        } else if (Os.isFamily(Os.FAMILY_MAC)) {
            "${project.buildDir}/mac/${parcl.app.appName}.app/Contents/Resources/"
        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
            "${project.buildDir}/linux/"
        } else {
            throw new GradleException("Failed to detect the running os")
        }
    }()

    def matchingJREUrlBase = "https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.5%2B10/"

    def matchingJREFileName = {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            "OpenJDK11U-jre_x64_windows_hotspot_11.0.5_10.zip"
        } else if (Os.isFamily(Os.FAMILY_MAC)) {
            "OpenJDK11U-jre_x64_mac_hotspot_11.0.5_10.tar.gz"
        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
            "OpenJDK11U-jre_x64_linux_hotspot_11.0.5_10.tar.gz"
        } else {
            throw new GradleException("Failed to detect the running os")
        }
    }()

    def matchingJRESHA256 = {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            "3f9e3e4256cb2c1b63b56864dca248d7f406874b21e859e5ac7ba7ada989eceb"
        } else if (Os.isFamily(Os.FAMILY_MAC)) {
            "dfd212023321ebb41bce8cced15b4668001e86ecff6bffdd4f2591ccaae41566"
        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
            "2f08c469c9a8adea1b6ee3444ba2a8242a7e99d87976a077faf037a9eb7f884b"
        } else {
            throw new GradleException("Failed to detect the running os")
        }
    }()

    task copyArduinoCli(type: Copy) {
        from ("${project(":arduino-cli").projectDir}") {
            include "arduino_cli/${OsUtil.targetName}/**"
        }
        into targetFolder
    }
    
    task verifyCopyArduinoCli(dependsOn: copyArduinoCli) {
        doLast {
            if(!file("${targetFolder}/arduino_cli/${OsUtil.targetName}/arduino-cli.yaml").exists()) {
                throw new GradleException("arduino cli files for target: ${OsUtil.targetName} not found.")
            }
        }
    }

    task fetchMatchingScratchRelease(type: Download) {
        src "https://github.com/intrigus/scratch-gui/releases/download/0.2.0.beta/scratch_dist.tar"
        new File("${buildDir}/scratch_tmp/").mkdirs()
        dest new File("${buildDir}/scratch_tmp/scratch_dist.tar")
    }

    task verifyMatchingScratchRelease(type: Verify, dependsOn: fetchMatchingScratchRelease) {
        src new File("${buildDir}/scratch_tmp/", "scratch_dist.tar")
        algorithm 'SHA-256'
        checksum "3cb8792d2e86d3740b273e383734d397559f48d7a3a586d5df024adfc4f689fc"
    }

    task unpackMatchingScratchRelease(type: Copy, dependsOn: verifyMatchingScratchRelease) {
        from tarTree(new File("${buildDir}/scratch_tmp/", "scratch_dist.tar"))
        into "${targetFolder}/scratch/"
    }

    task fetchMatchingJRE(type: Download) {
        src matchingJREUrlBase + matchingJREFileName
        new File("${buildDir}/jre_tmp/").mkdirs()
        dest new File("${buildDir}/jre_tmp/", matchingJREFileName)
    }

    task verifyMatchingJRE(type: Verify, dependsOn: fetchMatchingJRE) {
        src new File("${buildDir}/jre_tmp/", matchingJREFileName)
        algorithm 'SHA-256'
        checksum matchingJRESHA256
    }

    task unpackMatchingJRE(type: Copy, dependsOn: verifyMatchingJRE) {
        if(matchingJREFileName.endsWith(".zip")) {
            from zipTree(new File("${buildDir}/jre_tmp/", matchingJREFileName))
        } else {
            from tarTree(new File("${buildDir}/jre_tmp/", matchingJREFileName))
        }
        into "$buildDir/jre_to_be_bundled"
    }
    
    task patchMacOsDistribution(type: DoMacPatching) {
        appBundleName = parcl.app.appName
    }
    
    task distributeUnix(type: Tar) {
        compression = Compression.GZIP
        destinationDir = file("$buildDir/dist")
        if (Os.isFamily(Os.FAMILY_MAC)) {
            archiveName = "my_distribution_mac_x86_64.tar"
            from "${project.buildDir}/mac"
        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
            archiveName = "my_distribution_linux_x86_64.tar"
            destinationDir = file("$buildDir/dist")
            from "${project.buildDir}/linux"
        }
    }
    
    task distributeWindows(type: Zip) {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            archiveName = "my_distribution_windows_x86_64.zip"
            destinationDir = file("$buildDir/dist")
            from "${project.buildDir}/windows"
        }
    }

    task distribute {
        // see ArduinoCliCreator#target for information about the possible values 
        //tasks.getByPath(":arduino-cli:gatherNecessaryBinaries").target = "ALL"
                
        doLast {
            println 'distribute'
        }
    }

    bundleNative.dependsOn unpackMatchingJRE
    copyArduinoCli.dependsOn bundleNative
    unpackMatchingScratchRelease.dependsOn bundleNative
    distributeWindows.dependsOn verifyCopyArduinoCli, unpackMatchingScratchRelease    
    patchMacOsDistribution.mustRunAfter bundleNative
    distributeUnix.dependsOn patchMacOsDistribution
    distributeUnix.dependsOn verifyCopyArduinoCli, unpackMatchingScratchRelease
    distribute.dependsOn distributeWindows, distributeUnix
}
