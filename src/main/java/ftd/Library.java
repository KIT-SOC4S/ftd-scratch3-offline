/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ftd;

import java.io.IOException;
import java.io.InputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;

import ftd.field.ScratchField;
import ftd.field.ScratchFieldDeserializer;

public class Library {

	public static void main(String[] args) throws JsonParseException, JsonMappingException, IOException {
		ObjectMapper mapper = new ObjectMapper();
		SimpleModule module = new SimpleModule();
		module.addDeserializer(ScratchField.class, new ScratchFieldDeserializer());
		mapper.registerModule(module);
		directScratchFileTest(mapper);
	}

	private static void directScratchFileTest(ObjectMapper mapper) throws IOException {
		ClassLoader classloader = Thread.currentThread().getContextClassLoader();
		InputStream is = classloader.getResourceAsStream("biggertest.sb3");
		ZipInputStream zipStream = new ZipInputStream(is);
		byte[] bytes = null;

		ZipEntry entry;
		while ((entry = zipStream.getNextEntry()) != null) {
			if ("project.json".equals(entry.getName())) {
				bytes = zipStream.readAllBytes();
			} else {
				continue;
			}
		}

		ScratchSave scratchSave = mapper.readValue(bytes, ScratchSave.class);
		ScratchBlocks scratchBigger = scratchSave.getBlocks();
		scratchBigger.init();
		System.out.println(scratchBigger);
		System.out.println(scratchBigger.generateSetupCode());
		System.out.println(scratchBigger.getTopLevelBlocks().get(0).generateCode());
		System.out.println("------------");
	}
}
